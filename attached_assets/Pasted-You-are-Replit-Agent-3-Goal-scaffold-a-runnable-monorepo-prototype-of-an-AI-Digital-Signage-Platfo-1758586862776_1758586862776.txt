You are Replit Agent 3. Goal: scaffold a runnable monorepo prototype of an AI Digital Signage Platform (Admin + Player) and deliver a startable local demo.

Core requirements (must use these techs):
- Backend: Node.js + NestJS + Apollo GraphQL (TypeScript)
- Upload gateway: Koa.js (presigned S3 or local fallback)
- Worker: Node + BullMQ (Redis) for media processing jobs
- Search: Elasticsearch (dev image) for content index
- DB: PostgreSQL (TypeORM); include dev seed script
- Frontend: Next.js (TypeScript) for admin, Vite + React for player
- ML: Python FastAPI microservice with /tag-image and /suggest-playlist (deterministic fallback)
- Infra: Docker, docker-compose, nginx sample
- Auth: OAuth/JWT (dev stub if keys missing)
- CI/CD: include azure-pipelines.yml template (placeholders)

Monorepo minimal layout to create:
/
├─ apps/web-admin/
├─ apps/player-client/
├─ services/api/
├─ services/upload-gateway/
├─ services/worker/
├─ services/ml/
├─ infra/docker-compose.yml
├─ infra/nginx/nginx.conf
├─ scripts/seed-db.ts
├─ .env.example
├─ azure-pipelines.yml
├─ README.md

Must-deliverables for initial run:
1. `docker-compose up --build` starts Postgres, Redis, Elastic, api, upload-gateway, worker, ml (fallback), web-admin (dev), player-client (dev).
2. GraphQL schema + resolvers for core entities: Organization, User, Screen, Media, Scene, Playlist, Schedule, Broadcast. Include `presignUpload`, `registerMedia`, `createPlaylist`, `pushToScreen` and a `playerCommand` subscription.
3. Koa upload endpoint issues presigned S3 URLs and supports local /tmp fallback.
4. BullMQ worker processors: media:process (thumbnail), media:tag (calls ML), broadcast:push (publishes to Redis).
5. ML service returns deterministic tag JSON if real model missing.
6. Frontend admin: simple pages — login stub, media library (upload via presign), screens list, create playlist UI.
7. Player client: connects via WS/subscription, receives LOAD_PLAYLIST and renders images in a loop.
8. scripts/seed-db.ts to create sample org, admin user, one seeded player deviceKey, and a placeholder media asset.
9. README with exact local commands, acceptance test steps, and where to add secrets.

Acceptance test (document and make runnable):
- Run `docker-compose up --build`
- Run `scripts/seed-db`
- Use admin UI to presign-upload a placeholder image, register via GraphQL
- Confirm worker tags media and indexes to ES
- Create playlist and push to seeded player
- Player logs show received LOAD_PLAYLIST and displays content

Fallback rules (mandatory):
- If AWS keys missing → use local /tmp media storage and local signed-URL logic.
- If OAuth missing → provide dev-login that issues JWT for seeded admin.
- If ES or ML missing → use Postgres FT fallback and deterministic ML tags respectively.

When finished return:
1) top-level file tree,
2) docker-compose.yml & azure-pipelines.yml contents,
3) exact commands to run local demo and the acceptance-test script,
4) short 2-paragraph walkthrough of system interactions.

Start scaffolding now; prefer clarity and runnable defaults over production optimizations. Document any assumptions in README.
